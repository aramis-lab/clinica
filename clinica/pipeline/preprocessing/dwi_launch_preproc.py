#!/usr/bin/python

from clinica.engine.cworkflow import *

@RunDecorator(Dump)
def create_dwi_preproc_syb(in_dwi, in_T1, in_bvals, in_bvecs, working_directory, datasink_directory):
    """
    Create and run a high level pipeline to preprocess the DWI Images :
        - Preparation of the dataset
        - Correction for Head Motion
        - Correction for Eddy Currents
        - Correction for EPI susceptibility induced distortions using the SyN algorithm (SyB)
        - Bias field correction
    The outputs presented are tipically outputs necessary for further tractography.

    Inputs
    ---------
    in_dwi : STRING
      Path to the DWI image.
    in_T1: STRING
      Path to the T1 image.
    in_bvals: STRING
      Path to the b-vals text file.
    in_bvecs: STRING
      Path to the b-vecs text file.
    working_directory : STRING
      Directory to use as tmp for all the temporary files generated by the workflow.
    datasink_directory : STRING
      Base directory of the datasink.

    Outputs
    ----------
        DWI_hmc_ecc_sdc_bias_corrected - DWI corrected for Head motion, Eddy currents, EPI susceptibility induced distortions (syb) and bias field
        out_bvecs - updated and corrected gradient vectors table
        out_bvals - updated gradient values table
        mask_b0 - Binary mask obtained from the average of the B0 images

    """

    import nipype.interfaces.io as nio
    import nipype.interfaces.utility as niu
    import nipype.pipeline.engine as pe
    import os.path as op
    import clinica.pipeline.preprocessing.dwi_corrections as predifcorrect

# Inputs existence checking

    inputs=[in_dwi, in_T1, in_bvals, in_bvecs, working_directory, datasink_directory]

    for input_file in inputs:
        if not op.exists(input_file):
            raise IOError('file {} does not exist'.format(input_file))

    datasource = pe.Node(interface=nio.DataGrabber(infields=[], outfields=['dwi_image','bvectors_directions','bvalues','T1_image']), name='datasource')
    datasource.inputs.template = '*'
    datasource.inputs.field_template = dict(dwi_image= in_dwi,
                                            bvalues=in_bvals,
                                            bvectors_directions= in_bvecs,
                                            T1_image= in_T1)
    datasource.inputs.template_args = dict(dwi_image=[[]],
                                           bvalues=[[]],
                                           bvectors_directions=[[]],
                                           T1_image=[[]])
    datasource.inputs.sort_filelist = True

    inputnode = pe.Node(interface=niu.IdentityInterface(fields=["dwi_image", "bvectors_directions", "bvalues", 'T1_image']), name="inputnode")

    pre = predifcorrect.prepare_data(datasink_directory)

    hmc = predifcorrect.hmc_pipeline(datasink_directory)

    ecc = predifcorrect.ecc_pipeline(datasink_directory)

    sdc = predifcorrect.sdc_syb_pipeline(datasink_directory)

    bias = predifcorrect.remove_bias(datasink_directory)

    aac = predifcorrect.apply_all_corrections_syb(datasink_directory)

    datasink = pe.Node(nio.DataSink(), name='datasink_tracto')
    datasink.inputs.base_directory = op.join(datasink_directory, 'Outputs_for_Tractography/')

    wf = pe.Workflow(name='preprocess',base_dir=datasink_directory)
    wf.base_dir = working_directory

    wf.connect([(datasource, inputnode, [('dwi_image','dwi_image'), ('bvalues','bvalues'), ('bvectors_directions','bvectors_directions'), ('T1_image','T1_image')])])
    wf.connect([(inputnode, pre, [('dwi_image', 'inputnode.in_file'),
                                  ('bvalues', 'inputnode.in_bvals'),
                                  ('bvectors_directions', 'inputnode.in_bvecs')])])
    wf.connect([(pre, hmc,[('outputnode.dwi_b0_merge','inputnode.in_file'), ('outputnode.out_bvals','inputnode.in_bval'), ('outputnode.out_bvecs','inputnode.in_bvec')])])
    wf.connect([(pre, hmc, [('outputnode.mask_b0','inputnode.in_mask')])])
    wf.connect([(hmc, ecc, [('outputnode.out_xfms','inputnode.in_xfms'),('outputnode.out_file','inputnode.in_file')])])
    wf.connect([(pre, ecc, [('outputnode.out_bvals','inputnode.in_bval')])])
    wf.connect([(pre, ecc, [('outputnode.mask_b0','inputnode.in_mask')])])
    wf.connect([(ecc, sdc, [('outputnode.out_file','inputnode.DWI')])])
    wf.connect([(inputnode, sdc, [('T1_image','inputnode.T1')])])
    wf.connect([(pre, aac, [('outputnode.dwi_b0_merge', 'inputnode.in_dwi')])])
    wf.connect([(hmc, aac, [('outputnode.out_xfms', 'inputnode.in_hmc')])])
    wf.connect([(ecc, aac, [('outputnode.out_xfms', 'inputnode.in_ecc')])])
    wf.connect([(sdc, aac, [('outputnode.out_warp', 'inputnode.in_sdc_syb')])])
    wf.connect([(inputnode, aac, [('T1_image','inputnode.T1')])])

    wf.connect([(aac, bias, [('outputnode.out_file','inputnode.in_file')])])

    wf.connect([(bias, datasink, [('outputnode.out_file','DWI_hmc_ecc_sdc_bias_corrected')])])
    wf.connect([(hmc, datasink, [('outputnode.out_bvec','out_bvecs')])])
    wf.connect([(pre, datasink, [('outputnode.out_bvals','out_bvals')])])
    wf.connect([(bias, datasink, [('outputnode.b0_mask','b0_mask')])])

    return wf


@Visualize("freeview", "preprocessing/out_file/vol${subject_id}_maths_thresh_merged.nii.gz", "subject_id")
def diffusion_preprocessing_fieldmap_based(datasink_directory, num_b0s, name='diffusion_preprocessing_fieldmap_based'):
    """
    First extract the b0 volumes, co-registration and mean of the b0 volumes.
    See :func:`dwi_utils.b0_dwi_split`, :func:`dwi_utils.b0_flirt_pipeline`, :func:`dwi_utils.b0_average`.

    Then, correct four types of bias from epi :
     - Head motion correction. See :func:`dwi_corrections.hmc_pipeline`.
     - Susceptibility bias correction. See :func:`dwi_corrections.sdc_fmb`.
     - Eddy current correction. See :func:`dwi_corrections.ecc_pipeline`.
     - Estimates a single multiplicative bias field from the
    averaged *b0* image and applies it onto the diffusion data set. See :func:`dwi_corrections.remove_bias`.

    Inputnode
    ----------
    in_file : FILE
      Mandatory input. Dwi data set to preprocess.
    in_bvals : FILE
      Mandatory input. Bval file.
    in_bvecs : FILE
      Mandatory input. Bvecs file.
    bmap_mag : FILE
      Mandatory input. Grefield map. Magnitude.
    bmap_pha : FILE
      Mandatory input. Grefield map. Phase.

    Outputnode
    ----------
    out_file : FILE
      Output. The set of b0 volumes.
    out_bvec : FILE
      Output. The bvecs corresponding to the out_dwi.
    out_bval : FILE
      Output. The bvalues corresponding to the out_dwi.
    out_mask : FILE
      Output : The binary mask file.

    """
    from clinica.pipeline.preprocessing.dwi_utils import b0_dwi_split
    from clinica.pipeline.preprocessing.dwi_utils import b0_flirt_pipeline
    from clinica.pipeline.preprocessing.dwi_utils import insert_b0_into_dwi
    from clinica.pipeline.preprocessing.dwi_utils import b0_average
    from clinica.pipeline.preprocessing.dwi_corrections import hmc_pipeline
    from clinica.pipeline.preprocessing.dwi_corrections import sdc_fmb
    from clinica.pipeline.preprocessing.dwi_corrections import ecc_pipeline
    from clinica.pipeline.preprocessing.dwi_corrections import remove_bias
    from clinica.pipeline.preprocessing.dwi_corrections import prepare_data
    from nipype.workflows.dmri.fsl.utils import apply_all_corrections
    import nipype.interfaces.fsl as fsl
    import nipype.interfaces.io as nio
    import nipype.interfaces.utility as niu
    import nipype.pipeline.engine as pe
    import os.path as op



    inputnode = pe.Node(niu.IdentityInterface(fields=['in_file', 'in_bvals', 'in_bvecs', 'bmap_mag', 'bmap_pha']), name='inputnode')

    outputnode = pe.Node(niu.IdentityInterface(fields=['out_file', 'out_bvecs', 'out_bvals',  'out_mask']), name='outputnode')

    remove_bias_pip = remove_bias(name='remove_bias', datasink_directory=datasink_directory)
    hmc = hmc_pipeline(name='motion_correct', datasink_directory=datasink_directory)
    hmc.inputs.inputnode.ref_num = 0
    sdc = sdc_fmb(name='fmb_correction', datasink_directory=datasink_directory)
    ecc = ecc_pipeline(name='eddy_correct', datasink_directory=datasink_directory)
    pre = prepare_data(datasink_directory=datasink_directory, num_b0s=num_b0s)
    unwarp = apply_all_corrections()

    datasink = pe.Node(nio.DataSink(), name='datasink_preprocessing')
    datasink.inputs.base_directory = op.join(datasink_directory, 'preprocessing/')

    wf = pe.Workflow(name=name,base_dir=datasink_directory)
    wf.connect([
            (inputnode,            pre,                  [('in_file', 'inputnode.in_file'),
                                                          ('in_bvals', 'inputnode.in_bvals'),
                                                          ('in_bvecs', 'inputnode.in_bvecs')]),
            (pre,                  hmc,                  [('outputnode.dwi_b0_merge', 'inputnode.in_file'),
                                                          ('outputnode.out_bvals', 'inputnode.in_bval'),
                                                          ('outputnode.out_bvecs', 'inputnode.in_bvec')]),
            (pre,                  hmc,                  [('outputnode.mask_b0', 'inputnode.in_mask')]),
            (hmc,                  sdc,                  [('outputnode.out_file', 'inputnode.in_file')]),
            (pre,                  sdc,                  [('outputnode.mask_b0', 'inputnode.in_mask')]),
            (inputnode,            sdc,                  [('bmap_mag', 'inputnode.bmap_mag')]),
            (inputnode,            sdc,                  [('bmap_pha', 'inputnode.bmap_pha')]),
            (hmc,                  ecc,                  [('outputnode.out_xfms', 'inputnode.in_xfms')]),
            (pre,                  ecc,                  [('outputnode.out_bvals', 'inputnode.in_bval')]),
            (sdc,                  ecc,                  [('outputnode.out_file', 'inputnode.in_file')]),
            (pre,                  ecc,                  [('outputnode.mask_b0', 'inputnode.in_mask')]),
            (pre,                  unwarp,               [('outputnode.dwi_b0_merge', 'inputnode.in_dwi')]),
            (hmc,                  unwarp,               [('outputnode.out_xfms', 'inputnode.in_hmc')]),
            (ecc,                  unwarp,               [('outputnode.out_xfms', 'inputnode.in_ecc')]),
            (sdc,                  unwarp,               [('outputnode.out_warp', 'inputnode.in_sdc')]),
            (unwarp,               remove_bias_pip,      [('outputnode.out_file', 'inputnode.in_file')]),
#            (mask_b0,              remove_bias_pip,      [('mask_file', 'inputnode.in_mask')]),
            (hmc,                  outputnode,           [('outputnode.out_bvec', 'out_bvecs')]),
            (hmc,                  datasink,             [('outputnode.out_bvec', 'out_bvecs')]),
            (pre,                  outputnode,           [('outputnode.out_bvals', 'out_bval')]),
            (pre,                  datasink,             [('outputnode.out_bvals', 'out_bval')]),
            (remove_bias_pip,      outputnode,           [('outputnode.out_file', 'out_file')]),
            (remove_bias_pip,      datasink,             [('outputnode.out_file', 'out_file')]),
            (remove_bias_pip,      outputnode,           [('outputnode.b0_mask','b0_mask')]),
            (remove_bias_pip,      datasink,             [('outputnode.b0_mask','b0_mask')])
#            (mask_b0,              outputnode,           [('mask_file', 'out_mask')]),
#            (mask_b0,              datasink,             [('mask_file', 'out_mask')])
            ])

    return wf
