# Continous Integration Script
# Clinica - ARAMIS
#

stages:
  - build
  - install
  - short_tests
  - long_tests
  - package 


variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"
    CLINICA_ENV_BRANCH: "clinica_env_$CI_COMMIT_REF_NAME"
    WORK_DIR_LINUX: "/mnt/data/ci/working_dir_linux"
    WORK_DIR_MAC: "/Volumes/data/working_directory_ci_mac"

cache:
  paths:
    - .cache/

before_script:
  - pwd
  - export CLINICA_ENV_BRANCH_CLEAN=$(echo $CLINICA_ENV_BRANCH | tr -dc '[:alnum:]\-\_')
after_script:
  #  - conda env remove -y  --name clinica_env_upgrade_dep

build:mac:
  stage: build
  tags:
    - macOS
  script:
    # If the environment already exists or if it's changed
    # (by editing the environment.yml file), the environment
    # is recreated.
    - >
      if conda env list|grep -w $CLINICA_ENV_BRANCH_CLEAN; then
        if git diff HEAD~ --name-only|grep environment.yml; then
          echo "REcreate environment $CLINICA_ENV_BRANCH_CLEAN"
          conda env create --force --file environment.yml -n $CLINICA_ENV_BRANCH_CLEAN
        fi;
      else
        echo "Create environment $CLINICA_ENV_BRANCH_CLEAN"
        conda env create --force --file environment.yml -n $CLINICA_ENV_BRANCH_CLEAN
      fi;

build:linux:
  stage: build
  tags:
    - linux
  script:
    # If the environment already exists or if it's changed
    # (by editing the environment.yml file), the environment
    # is recreated.
    - >
      if conda env list|grep -w $CLINICA_ENV_BRANCH_CLEAN; then
        if git diff HEAD~ --name-only|grep environment.yml; then
          echo "REcreate environment $CLINICA_ENV_BRANCH_CLEAN"
          conda env create --force --file environment.yml -n $CLINICA_ENV_BRANCH_CLEAN
        fi;
      else
        echo "Create environment $CLINICA_ENV_BRANCH_CLEAN"
        conda env create --force --file environment.yml -n $CLINICA_ENV_BRANCH_CLEAN
      fi;

launch:mac:
  # Install python dependencies for  Clinica 
  stage: install 
  tags:
    - install
    - macOS
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - pip install --ignore-installed .
    - eval "$(register-python-argcomplete clinica)"
    - clinica --help
    - source deactivate
  

launch:linux:
  # Install python dependencies for  Clinica 
  stage: install
  tags:
    - install
    - linux
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - pip install --ignore-installed .
    - eval "$(register-python-argcomplete clinica)"
    - clinica --help
    - source deactivate

test:style:
  stage: short_tests
  tags:
    - linux
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - pytest --verbose -k 'test_coding_style'
      
test:instantiate:mac:
  stage: short_tests
  tags:
    - macOS
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /Volumes/data/data_ci ./data
    - pytest --verbose -k 'test_instantiate'
    - module purge
    - source deactivate
  
test:instantiate:linux:
  stage: short_tests
  tags:
    - linux
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /localdrive10TB/data/ci/data_ci_upgrade ./data
    - taskset -c 0-21 pytest 
         --verbose 
         --working_directory=$WORK_DIR_LINUX  
         --disable-warnings 
         --timeout=0 
         -n 6 
         -k 'test_instantiate'
    - module purge
    - source deactivate
 
test:run:mac:iotools:
  stage: long_tests
  tags:
    - macOS
    - long
  only:
    - schedules
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /Volumes/data/data_ci ./data
    - pytest 
         --verbose
         --working_directory=$WORK_DIR_MAC
         --disable-warnings
         --numprocesses 4
         nonregression/test_run_iotools.py
    - module purge
    - source deactivate
    - rm -rf $WORK_DIR_MAC/*

test:run:mac:pipelines:
  stage: long_tests
  tags:
    - macOS
    - long
  only:
    - schedules
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /Volumes/data/data_ci ./data
    - pytest 
         --verbose
         --working_directory=$WORK_DIR_MAC
         --disable-warnings
         --numprocesses 4
         nonregression/test_run_pipelines.py
    - module purge
    - source deactivate
    - rm -rf $WORK_DIR_MAC/*

test:run:linux:iotools:
  stage: long_tests
  tags:
    - linux
    - long
  only:
    - schedules
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /localdrive10TB/data/ci/data_ci_upgrade ./data
    - pytest
         --verbose
         --working_directory=$WORK_DIR_LINUX
         --disable-warnings
         --timeout=0
         --numprocesses 4
         nonregression/test_run_iotools.py
    - module purge
    - source deactivate
    - rm -rf WORK_DIR_LINUX/*

test:run:linux:pipelines:
  stage: long_tests
  tags:
    - linux
    - long
  only:
    - schedules
  script:
    - source activate $CLINICA_ENV_BRANCH_CLEAN
    - module load clinica.all
    - cd test
    - ln -s /localdrive10TB/data/ci/data_ci_upgrade ./data
    - pytest
         --verbose
         --working_directory=$WORK_DIR_LINUX
         --disable-warnings
         --timeout=0
         --numprocesses 4
         nonregression/test_run_pipelines.py
    - module purge
    - source deactivate
    - rm -rf WORK_DIR_LINUX/*
pkg:
  stage: package
  tags:
    - macOS
  script:
    - tar -cvzf --exclude='.gitignore' --exclude='.git' --exclude='.DS_Store' --exclude='.gitmodules' --exclude='.idea' --exclude='.vscode' --exclude='.gitlab-ci.yml' -f clinica-$CI_COMMIT_REF_NAME.tar.gz  ./*
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - clinica-$CI_COMMIT_REF_NAME.tar.gz
  only:
    - tags
