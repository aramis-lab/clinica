#!/usr/bin/env groovy

// Continuous Integration script for Clinica
// www.clinica.run
// Author: mauricio.diaz@inria.fr

pipeline {
  agent none
    triggers {
      cron('H 21 */2 * *')
    }
    stages {
      stage('Run Tests') {
        parallel {
          // stage('Linux:pipAnat') {
          //   agent { label 'ubuntu && long' }
          //   when { 
          //     branch 'dev'
          //   }
          //   environment {
          //     PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
          //     CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
          //     WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
          //     DATA_DIR_LINUX = "/mnt/data_ci/"
          //     TMP_DIR = "/mnt/data/ci/tmp"
          //     }
          //   steps {
          //     echo 'Testing pipeline run anat...'
          //     sh 'echo "Agent name: ${NODE_NAME}"' 
          //     sh '''
          //        set +x
          //        eval "$(conda shell.bash hook)"
          //        source /usr/local/Modules/init/profile.sh
          //        source ./.jenkins/scripts/find_env.sh
          //        conda activate ${CLINICA_ENV_BRANCH}
          //        module load clinica.all
          //        cd test
          //        ln -s /mnt/data/ci/data_ci_linux ./data
          //        pytest \
          //           --verbose \
          //           --working_directory=$WORK_DIR_LINUX \
          //           --input_data_directory=$DATA_DIR_LINUX \
          //           --basetemp=$TMP_DIR \
          //           --disable-warnings \
          //           --timeout=0 \
          //           -n 4 \
          //           nonregression/pipelines/test_run_pipelines_anat.py
          //        module purge
          //        conda deactivate
          //        '''
          //   }
          //   post {
          //     always {
          //       sh '''
          //          rm -rf "${WORK_DIR_LINUX}/*"
          //          rm -rf "${TMP_DIR}/*"
          //          '''
          //     }
          //   }
          // }
          // stage('Mac:pipAnat') {
          //   agent { label 'macos && long' }
          //   when { 
          //     branch 'dev'
          //   }
          //   environment {
          //     PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
          //     CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
          //     WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
          //     DATA_DIR_MAC = "/Volumes/data_ci/"
          //     TMP_DIR = "/Volumes/data/tmp"
          //     }
          //   steps {
          //     echo 'Testing pipeline instantiation...'
          //     sh 'echo "Agent name: ${NODE_NAME}"' 
          //     sh '''
          //        set +x
          //        eval "$(conda shell.bash hook)"
          //        source /usr/local/opt/modules/init/bash 
          //        source ./.jenkins/scripts/find_env.sh
          //        conda activate ${CLINICA_ENV_BRANCH}
          //        module load clinica.all
          //        cd test
          //        ln -s /Volumes/data/data_ci ./data
          //        pytest \
          //           --verbose \
          //           --working_directory=$WORK_DIR_MAC \
          //           --input_data_directory=$DATA_DIR_MAC \
          //           --basetemp=$TMP_DIR \
          //           --disable-warnings \
          //           --timeout=0 \
          //           -n 4 \
          //           nonregression/pipelines/test_run_pipelines_anat.py
          //        module purge
          //        conda deactivate
          //        '''
          //   }
          //   post {
          //     always {
          //       sh '''
          //          rm -rf "${WORK_DIR_MAC}/*"
          //          rm -rf "${TMP_DIR}/*"
          //          '''
          //     }
          //   }
          // }
          stage('Linux:pipPET') {
            agent { label 'ubuntu && long' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              DATA_DIR_LINUX = "/mnt/data_ci/"
              TMP_DIR = "/mnt/data/ci/tmp"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --input_data_directory=$DATA_DIR_LINUX \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_pet.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Mac:pipPET') {
            agent { label 'macos && long' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
              DATA_DIR_MAC = "/Volumes/data_ci/"
              TMP_DIR = "/Volumes/data/tmp"
              }
            steps {
              echo 'Testing pipeline instantiation...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/opt/modules/init/bash
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /Volumes/data/data_ci ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_MAC \
                    --input_data_directory=$DATA_DIR_MAC \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_pet.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_MAC}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Linux:pipStats') {
            agent { label 'ubuntu' } 
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              DATA_DIR_LINUX = "/mnt/data_ci/"
              TMP_DIR = "/mnt/data/ci/tmp"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --input_data_directory=$DATA_DIR_LINUX \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_stats.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Mac:pipStats') {
            agent { label 'macos' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
              DATA_DIR_MAC = "/Volumes/data_ci/"
              TMP_DIR = "/Volumes/data/tmp"
              }
            steps {
              echo 'Testing pipeline instantiation...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/opt/modules/init/bash
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /Volumes/data/data_ci ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_MAC \
                    --input_data_directory=$DATA_DIR_MAC \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_stats.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_MAC}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Linux:pipML') {
            agent { label 'ubuntu' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              DATA_DIR_LINUX = "/mnt/data_ci/"
              TMP_DIR = "/mnt/data/ci/tmp"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --input_data_directory=$DATA_DIR_LINUX \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_ml.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Mac:pipML') {
            agent { label 'macos' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
              DATA_DIR_MAC = "/Volumes/data_ci/"
              TMP_DIR = "/Volumes/data/tmp"
              }
            steps {
              echo 'Testing pipeline instantiation...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/opt/modules/init/bash
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /Volumes/data/data_ci ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_MAC \
                    --input_data_directory=$DATA_DIR_MAC \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_ml.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_MAC}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          stage('Linux:pipDWI') {
            agent { label 'ubuntu && long' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              DATA_DIR_LINUX = "/mnt/data_ci/"
              TMP_DIR = "/mnt/data/ci/tmp"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --input_data_directory=$DATA_DIR_LINUX \
                    --basetemp=$TMP_DIR \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/pipelines/test_run_pipelines_dwi.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   rm -rf "${TMP_DIR}/*"
                   '''
              }
            }
          }
          // stage('Mac:pipDWI') {
          //   agent { label 'macos && long' }
          //   when { 
          //     branch 'dev'
          //   }
          //   environment {
          //     PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
          //     CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
          //     WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
          //     DATA_DIR_MAC = "/Volumes/data_ci/"
          //     }
          //   steps {
          //     echo 'Testing pipeline instantiation...'
          //     sh 'echo "Agent name: ${NODE_NAME}"' 
          //     sh '''
          //        set +x
          //        eval "$(conda shell.bash hook)"
          //        source /usr/local/opt/modules/init/bash
          //        source ./.jenkins/scripts/find_env.sh
          //        conda activate ${CLINICA_ENV_BRANCH}
          //        module load clinica.all
          //        cd test
          //        ln -s /Volumes/data/data_ci ./data
          //        pytest \
          //           --verbose \
          //           --working_directory=$WORK_DIR_MAC \
          //           --input_data_directory=$DATA_DIR_MAC \
          //           --basetemp=$TMP_DIR \
          //           --disable-warnings \
          //           --timeout=0 \
          //           -n 4 \
          //           nonregression/pipelines/test_run_pipelines_dwi.py
          //        module purge
          //        conda deactivate
          //        '''
          //   }
          //   post {
          //     always {
          //       sh '''
          //          rm -rf "${WORK_DIR_MAC}/*"
          //          rm -rf "${TMP_DIR}/*"
          //          '''
          //     }
          //   }
          // }
        }
      }
    }
    post {
      failure {
        mail to: 'clinica-ci@inria.fr',
          subject: "Scheduled Pipeline: ${currentBuild.fullDisplayName}",
          body: "Something is wrong with the Scheduled Pipeline  ${env.BUILD_URL}"
      }
    }
  }
