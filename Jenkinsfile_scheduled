#!/usr/bin/env groovy

// Continuous Integration script for Clinica
// www.clinica.run
// Author: mauricio.diaz@inria.fr

pipeline {
  agent none
    triggers {
      cron('H 21 */2 * *')
    }
    stages {
      stage('Run Tests') {
        parallel {
          stage('Linux:iotools') {
            agent { label 'ubuntu' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/test_run_iotools.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   '''
              }
            }
          }
          stage('Mac:iotools') {
            agent { label 'macos' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
              }
            steps {
              echo 'Testing pipeline instantation...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/opt/modules/init/bash
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /Volumes/data/data_ci ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_MAC \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/test_run_iotools.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_MAC}/*"
                   '''
              }
            }
          }
          stage('Linux:pipeline') {
            agent { label 'ubuntu && long' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda/bin:/usr/local/Modules/bin:$PATH"
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_LINUX = "/mnt/data/ci/working_dir_linux"
              }
            steps {
              echo 'Testing pipeline run...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/Modules/init/profile.sh
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /mnt/data/ci/data_ci_linux ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_LINUX \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/test_run_pipelines.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_LINUX}/*"
                   '''
              }
            }
          }
          stage('Mac:pipeline') {
            agent { label 'macos && long' }
            when { 
              branch 'dev'
            }
            environment {
              PATH = "$HOME/miniconda3/bin:/usr/local/Cellar/modules/4.1.2/bin:$PATH" 
              CLINICA_ENV_BRANCH = "clinica_env_$BRANCH_NAME"
              WORK_DIR_MAC = "/Volumes/data/working_directory_ci_mac"
              }
            steps {
              echo 'Testing pipeline instantation...'
              sh 'echo "Agent name: ${NODE_NAME}"' 
              sh '''
                 set +x
                 eval "$(conda shell.bash hook)"
                 source /usr/local/opt/modules/init/bash
                 source ./.jenkins/scripts/find_env.sh
                 conda activate ${CLINICA_ENV_BRANCH}
                 module load clinica.all
                 cd test
                 ln -s /Volumes/data/data_ci ./data
                 pytest \
                    --verbose \
                    --working_directory=$WORK_DIR_MAC \
                    --disable-warnings \
                    --timeout=0 \
                    -n 4 \
                    nonregression/test_run_pipelines.py
                 module purge
                 conda deactivate
                 '''
            }
            post {
              always {
                sh '''
                   rm -rf "${WORK_DIR_MAC}/*"
                   '''
              }
            }
          }
        }
      }
    }
    post {
      failure {
        mail to: 'clinica-ci@inria.fr',
          subject: "Scheduled Pipeline: ${currentBuild.fullDisplayName}",
          body: "Something is wrong with the Scheduled Pipeline  ${env.BUILD_URL}"
      }
    }
  }
